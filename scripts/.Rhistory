distance.between.stages(dplex.pearson.matrix, '3', '5')
distance.between.stages(dplex.pearson.matrix, '5', 'E')
distance.between.stages(dplex.pearson.matrix, 'E', 'L')
distance.between.stages(dplex.pearson.matrix, 'L', 'A')
#spearman
oe.spearman.matrix <- cor(oe.tpm, method="spearman")
oe.spearman.matrix <- (1 - oe.spearman.matrix)/2
dplex.spearman.matrix <- cor(dplex.tpm, method="spearman")
dplex.spearman.matrix <- (1 - dplex.spearman.matrix)/2
#get distances OE
distance.between.stages(oe.spearman.matrix, '3', '5')
distance.between.stages(oe.spearman.matrix, '5', 'E')
distance.between.stages(oe.spearman.matrix, 'E', 'L')
distance.between.stages(oe.spearman.matrix, 'L', 'A')
distance.between.stages(oe.spearman.matrix, 'L', 'A')
#get dplex distances
distance.between.stages(dplex.spearman.matrix, '3', '5')
distance.between.stages(dplex.spearman.matrix, '5', 'E')
distance.between.stages(dplex.spearman.matrix, 'E', 'L')
distance.between.stages(dplex.spearman.matrix, 'L', 'A')
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- log(dplex.tpm + 1)
#manhattan
#manhattan
oe.manhattan.matrix <- dist(oe.tpm, method='manhattan')
oe.manhattan.matrix <- as.matrix(oe.manhattan.matrix, labels=TRUE)
dplex.manhattan.matrix <- dist(dplex.tpm, method='manhattan')
dplex.manhattan.matrix <- as.matrix(dplex.manhattan.matrix, labels=TRUE)
#get distances OE
distance.between.stages(oe.manhattan.matrix, '3', '5')
#get distances OE
distance.between.stages(oe.manhattan.matrix, '3', '5')
distance.between.stages(oe.manhattan.matrix, '5', 'E')
distance.between.stages(oe.manhattan.matrix, 'E', 'L')
distance.between.stages(oe.manhattan.matrix, 'L', 'A')
#get dplex distances
distance.between.stages(dplex.manhattan.matrix, '3', '5')
distance.between.stages(dplex.manhattan.matrix, '5', 'E')
distance.between.stages(dplex.manhattan.matrix, 'E', 'L')
distance.between.stages(dplex.manhattan.matrix, 'L', 'A')
#!/usr/bin/env Rscript
library(vegan)
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- log(dplex.tpm + 1)
#reformat dataframes
rownames(oe.tpm) <- oe.tpm$X
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
oe.tpm <- log(oe.tpm + 1)
#reformat dataframes
oe.tpm <- t(oe.tpm)
dplex.tpm <- t(dplex.tpm)
#spearman
oe.spearman.matrix <- cor(oe.tpm, method="spearman")
oe.spearman.matrix <- (1 - oe.spearman.matrix)/2
dplex.spearman.matrix <- cor(dplex.tpm, method="spearman")
dplex.spearman.matrix <- (1 - dplex.spearman.matrix)/2
#pearson
oe.pearson.matrix <- cor(oe.tpm, method="pearson")
oe.pearson.matrix <- (1 - oe.pearson.matrix)/2
dplex.pearson.matrix <- cor(dplex.tpm, method="pearson")
dplex.pearson.matrix <- (1 - dplex.pearson.matrix)/2
#perform mantel tests
#manhattan
mantel.test.manhattan <- mantel(oe.manhattan.matrix, dplex.manhattan.matrix)
print(mantel.test.manhattan)
#spearman
mantel.test.spearman <- mantel(oe.spearman.matrix, dplex.spearman.matrix)
print(mantel.test.spearman)
#quick plots
oe.manhattan.vector <- as.vector(oe.manhattan.matrix)
oe.spearman.vector <- as.vector(oe.spearman.matrix)
dplex.spearman.vector <- as.vector(dplex.spearman.matrix)
plot(oe.spearman.vector, dplex.spearman.vector,
main = "Mantel Test: Pairwise Distance Comparison",
xlab = "OE",
ylab = "Dplex",
pch = 19,  # Plotting character
col = "blue")  # Color of points
# Add a linear regression line
abline(lm(dplex.spearman.vector ~ oe.spearman.vector), col = "red")
spearman.df <- data.frame(oe.spearman.vector, dplex.spearman.vector)
View(spearman.df)
write.csv('../data/transcriptional_correlation_dplex_oe_spearman.csv')
write.csv(spearman.df, '../data/transcriptional_correlation_dplex_oe_spearman.csv')
oe.pearson.vector <- as.vector(oe.pearson.matrix)
dplex.pearson.vector <- as.vector(dplex.pearson.matrix)
pearson.df <- data.frame(oe.pearson.vector, dplex.pearson.vector)
write.csv(spearman.df, '../data/transcriptional_correlation_dplex_oe_pearson.csv')
plot(oe.pearson.vector, dplex.pearson.vector,
main = "Mantel Test: Pairwise Distance Comparison",
xlab = "OE",
ylab = "Dplex",
pch = 19,  # Plotting character
col = "blue")  # Color of points
# Add a linear regression line
abline(lm(dplex.pearson.vector ~ oe.pearson.vector), col = "red")
?write.csv
write.csv(spearman.df, '../data/transcriptional_correlation_dplex_oe_pearson.csv', row.names = FALSE)
write.csv(spearman.df, '../data/transcriptional_correlation_dplex_oe_spearman.csv', row.names = FALSE)
oe.pearson.vector <- as.vector(oe.pearson.matrix)
dplex.pearson.vector <- as.vector(dplex.pearson.matrix)
pearson.df <- data.frame(oe.pearson.vector, dplex.pearson.vector)
write.csv(pearson.df, '../data/transcriptional_correlation_dplex_oe_pearson.csv', row.names = FALSE)
#spearman
mantel.test.spearman <- mantel(oe.spearman.matrix, dplex.spearman.matrix)
print(mantel.test.spearman)
#pearson
mantel.test.pearson <- mantel(oe.pearson.matrix, dplex.pearson.matrix)
print(mantel.test.pearson)
#!/usr/bin/env Rscript
library(vegan)
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- log(dplex.tpm + 1)
#calculate distance matricies
#manhattan
oe.manhattan.matrix <- dist(oe.tpm, method='manhattan')
oe.manhattan.matrix <- as.matrix(oe.manhattan.matrix, labels=TRUE)
colnames(oe.manhattan.matrix) <- rownames(oe.manhattan.matrix) <- oe.tpm[['X']]
dplex.manhattan.matrix <- dist(dplex.tpm, method='manhattan')
dplex.manhattan.matrix <- as.matrix(dplex.manhattan.matrix, labels=TRUE)
colnames(dplex.manhattan.matrix) <- rownames(dplex.manhattan.matrix) <- dplex.tpm[['X']]
#perform mantel tests
#manhattan
mantel.test.manhattan <- mantel(oe.manhattan.matrix, dplex.manhattan.matrix)
print(mantel.test.manhattan)
#quick plots
oe.manhattan.vector <- as.vector(oe.manhattan.matrix)
dplex.manhattan.vector <- as.vector(dplex.manhattan.matrix)
plot(oe.manhattan.vector, dplex.manhattan.vector,
main = "Mantel Test: Pairwise Distance Comparison",
xlab = "OE",
ylab = "Dplex",
pch = 19,  # Plotting character
col = "blue")  # Color of points
# Add a linear regression line
abline(lm(dplex.manhattan.vector ~ oe.manhattan.vector), col = "red")
plot(dplex.manhattan.vector,oe.manhattan.vector,
main = "Mantel Test: Pairwise Distance Comparison",
xlab = "OE",
ylab = "Dplex",
pch = 19,  # Plotting character
col = "blue")  # Color of points
# Add a linear regression line
abline(lm(oe.manhattan.vector ~ dplex.manhattan.vector), col = "red")
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
#calculate distance matricies
#manhattan
oe.manhattan.matrix <- dist(oe.tpm, method='manhattan')
oe.manhattan.matrix <- as.matrix(oe.manhattan.matrix, labels=TRUE)
colnames(oe.manhattan.matrix) <- rownames(oe.manhattan.matrix) <- oe.tpm[['X']]
dplex.manhattan.matrix <- dist(dplex.tpm, method='manhattan')
dplex.manhattan.matrix <- as.matrix(dplex.manhattan.matrix, labels=TRUE)
colnames(dplex.manhattan.matrix) <- rownames(dplex.manhattan.matrix) <- dplex.tpm[['X']]
#perform mantel tests
#manhattan
mantel.test.manhattan <- mantel(oe.manhattan.matrix, dplex.manhattan.matrix)
print(mantel.test.manhattan)
#quick plots
oe.manhattan.vector <- as.vector(oe.manhattan.matrix)
dplex.manhattan.vector <- as.vector(dplex.manhattan.matrix)
plot(dplex.manhattan.vector,oe.manhattan.vector,
main = "Mantel Test: Pairwise Distance Comparison",
xlab = "OE",
ylab = "Dplex",
pch = 19,  # Plotting character
col = "blue")  # Color of points
# Add a linear regression line
abline(lm(oe.manhattan.vector ~ dplex.manhattan.vector), col = "red")
library(dplyr)
# function to extract entries based on sample id
select.stage <- function(matrix, char) {
entries <- rownames(matrix)
subset(entries, substr(entries, 6, 6) == char)
}
# function to get average distance
distance.between.stages <- function(matrix, stage1, stage2){
stage1.entries <- select.stage(matrix, stage1)
stage2.entries <- select.stage(matrix, stage2)
average.distance <- mean(matrix[stage1.entries, stage2.entries])
return(average.distance)
}
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
#calculate manhattan distances
oe.manhattan.matrix <- dist(oe.tpm, method='manhattan')
oe.manhattan.matrix <- as.matrix(oe.manhattan.matrix, labels=TRUE)
View(oe.manhattan.matrix)
View(oe.tpm)
dplex.manhattan.matrix <- dist(dplex.tpm, method='manhattan')
dplex.manhattan.matrix <- as.matrix(dplex.manhattan.matrix, labels=TRUE)
#get distances OE
distance.between.stages(oe.manhattan.matrix, '3', '5')
distance.between.stages(oe.manhattan.matrix, '5', 'E')
distance.between.stages(oe.manhattan.matrix, 'E', 'L')
distance.between.stages(oe.manhattan.matrix, 'L', 'A')
#get dplex distances
distance.between.stages(dplex.manhattan.matrix, '3', '5')
distance.between.stages(dplex.manhattan.matrix, '5', 'E')
distance.between.stages(dplex.manhattan.matrix, 'E', 'L')
distance.between.stages(dplex.manhattan.matrix, 'L', 'A')
#log transform
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- log(dplex.tpm + 1)
#calculate manhattan distances
oe.manhattan.matrix <- dist(oe.tpm, method='manhattan')
oe.manhattan.matrix <- as.matrix(oe.manhattan.matrix, labels=TRUE)
dplex.manhattan.matrix <- dist(dplex.tpm, method='manhattan')
dplex.manhattan.matrix <- as.matrix(dplex.manhattan.matrix, labels=TRUE)
#get distances OE
distance.between.stages(oe.manhattan.matrix, '3', '5')
distance.between.stages(oe.manhattan.matrix, '5', 'E')
distance.between.stages(oe.manhattan.matrix, 'E', 'L')
distance.between.stages(oe.manhattan.matrix, 'L', 'A')
#get dplex distances
distance.between.stages(dplex.manhattan.matrix, '3', '5')
distance.between.stages(dplex.manhattan.matrix, '5', 'E')
distance.between.stages(dplex.manhattan.matrix, 'E', 'L')
distance.between.stages(dplex.manhattan.matrix, 'L', 'A')
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
#!/usr/bin/env Rscript
library(vegan)
#load data
oe.tpm <- read.csv('../data/oe_tpm_counts_kallisto.csv', row.names = 1)
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- log(dplex.tpm + 1)
oe.tpm <- log(oe.tpm + 1)
dplex.tpm <- read.csv('../data/dpl_inf_tpm_counts_kallisto.csv', row.names = 1)
dplex.tpm <- log(dplex.tpm + 1)
#reformat dataframes
oe.tpm <- t(oe.tpm)
dplex.tpm <- t(dplex.tpm)
#pearson
oe.pearson.matrix <- cor(oe.tpm, method="pearson")
oe.pearson.matrix <- (1 - oe.pearson.matrix)/2
dplex.pearson.matrix <- cor(dplex.tpm, method="pearson")
dplex.pearson.matrix <- (1 - dplex.pearson.matrix)/2
#pearson
mantel.test.pearson <- mantel(oe.pearson.matrix, dplex.pearson.matrix)
print(mantel.test.pearson)
#!/usr/bin/env Rscript
library(vegan)
#!/usr/bin/env Rscript
library(vegan)
?capscale
?vegdist
#Distance based-Redundancy analysis
# Perform dbRDA
dbRDA.model <- capscale(oe.pearson.matrix ~ dplex.pearson.matrix)
summary(dbRDA.model)
plot(dbRDA.model)
dbRDA.model
#Distance based-Redundancy analysis
# Perform dbRDA
dbRDA.model <- dbrda(oe.pearson.matrix ~ dplex.pearson.matrix)
dbRDA.model
summary(dbRDA.model)
plot(dbRDA.model)
summary(dbRDA.model)
#Distance based-Redundancy analysis
# Perform dbRDA
dbRDA.model <- rda(oe.pearson.matrix ~ dplex.pearson.matrix)
#Distance based-Redundancy analysis
# Perform dbRDA
dbRDA.model <- dbrda(oe.pearson.matrix ~ dplex.pearson.matrix)
summary(dbRDA.model)
var.explained <- summary(dbRDA.model)$cont[[1]]
print(var.explained)
adj.r.squared <- RsquareAdj(dbRDA.model)
print(adj.r.squared)
anova(dbRDA.model, by="terms", permu=999)
anova(dbRDA.model, permu=999)
summary(anova(dbRDA.model, permu=999))
print(dbRDA.model)
#Distance based-Redundancy analysis
# RDA
oe.pcoa <- cmdscale(oe.pearson.matrix, eig = TRUE, k = nrow(oe.pearson.matrix) - 1)
#Distance based-Redundancy analysis
# RDA
oe.pearson.dist <- as.dist(oe.pearson.matrix)
oe.pcoa <- cmdscale(oe.pearson.dist, eig = TRUE, k = nrow(oe.pearson.matrix) - 1)
dplex.pearson.dist <- as.dist(dplex.pearson.matrix)
dplex.pcoa <- cmdscale(dplex.pearson.dist, eig = TRUE, k = nrow(dplex.pearson.matrix) - 1)
# Extract the principal coordinates
oe.coords <- oe.pcoa$points
dplex.coords <- dplex.pcoa$points
View(oe.coords)
#perform RDA
rda.model <- rda(oe.coords ~ dplex.coords)
summary(rda.model)
R2 <- RsquareAdj(rda.model)
print(R2)
plot(rda.model)
library(vegan)
library(tidyverse)
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
colnames(data)[1] <- "sample.id"
View(data)
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
View(data)
colnames(data)[1] <- "sample.id"
#load metadata
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
View(metadata)
metadata <- subset(metadata, infection.status = "infected")
metadata <- subset(metadata, infection.status == "infected")
View(metadata)
#load metadata
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
metadata <- subset(metadata, infection.status == "infected")
View(data)
View(metadata)
colnames(metadata)
test <- metadata %>%
left_join(data, by = c("sample.id"))
trt <- test %>%
select(c("sample.id","developmental.stage", "plant"))
data2 <- test %>%
select(-c("sample.id", "plant", "infection.status", "developmental.stage", "lineage"))
#calculat distance matrix using pearson distances
data3 <- t(data2)
pearson.correlation.matrix <- cor(data3, method="pearson")
pearson.correlation.matrix <- (1 - pearson.correlation.matrix)/2
pearson.correlation.matrix <- as.dist(pearson.correlation.matrix)
ad.test <- adonis2(pearson.correlation.matrix ~ developmental.stage+plant, data = trt)
View(data)
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
colnames(data)[1] <- "sample.id"
#log transform
data <- data + 1
#log transform
data <- log(data + 1)
#log transform
data[ , -1] <- log(data[ , -1] + 1)
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
colnames(data)[1] <- "sample.id"
View(data)
#log transform
data[ , -1] <- log(data[ , -1] + 1)
View(data)
#load metadata
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
metadata <- subset(metadata, infection.status == "infected")
colnames(metadata)
test <- metadata %>%
left_join(data, by = c("sample.id"))
trt <- test %>%
select(c("sample.id","developmental.stage", "plant"))
data2 <- test %>%
select(-c("sample.id", "plant", "infection.status", "developmental.stage", "lineage"))
data3 <- t(data2)
View(data3)
pearson.correlation.matrix <- cor(data3, method="pearson")
pearson.correlation.matrix <- (1 - pearson.correlation.matrix)/2
pearson.correlation.matrix <- as.dist(pearson.correlation.matrix)
ad.test <- adonis2(pearson.correlation.matrix ~ developmental.stage+plant, data = trt)
pearson.correlation.matrix <- cor(data3, method="pearson")
pearson.correlation.matrix <- (1 - pearson.correlation.matrix)/2
View(pearson.correlation.matrix)
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
colnames(data)[1] <- "sample.id"
#log transform
data[ , -1] <- log(data[ , -1] + 1)
#load metadata
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
metadata <- subset(metadata, infection.status == "infected")
colnames(metadata)
View(data)
View(metadata)
metadata.ids <- metadata['sample.id']
View(metadata.ids)
metadata.ids <- as.vector(metadata['sample.id'])
View(metadata.ids)
data.ids <- data['sample.id']
metadata.ids <- metadata['sample.id']
data.ids <- data['sample.id']
# Find the entries that are in metadata_ids but not in data_ids
not_in_data <- setdiff(metadata_ids, data_ids)
not.in.data <- setdiff(metadata.ids, data.ids)
not.in.metadata <- setdiff(data.ids, metadata.ids)
not.in.data
not.in.metadata
#find missing sample
metadata.ids <- metadata['sample.id']
data.ids <- data['sample.id']
not.in.data <- setdiff(metadata.ids, data.ids)
not.in.data
View(metadata)
#remove from metadata
metadata <- metadata[metadata$sample.id != "mtstpEiu113", ]
#load data
data <- read.csv('../data/oe_tpm_counts_kallisto.csv')
colnames(data)[1] <- "sample.id"
#log transform
data[ , -1] <- log(data[ , -1] + 1)
#load metadata
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
metadata <- subset(metadata, infection.status == "infected")
#find failed sample and remove from metadata
metadata.ids <- metadata['sample.id']
data.ids <- data['sample.id']
not.in.data <- setdiff(metadata.ids, data.ids)
not.in.data
metadata <- metadata[metadata$sample.id != "mtstpEiu113", ]
test <- metadata %>%
left_join(data, by = c("sample.id"))
trt <- test %>%
select(c("sample.id","developmental.stage", "plant"))
data2 <- test %>%
select(-c("sample.id", "plant", "infection.status", "developmental.stage", "lineage"))
data3 <- t(data2)
pearson.correlation.matrix <- cor(data3, method="pearson")
pearson.correlation.matrix <- (1 - pearson.correlation.matrix)/2
pearson.correlation.matrix <- as.dist(pearson.correlation.matrix)
ad.test <- adonis2(pearson.correlation.matrix ~ developmental.stage+plant, data = trt)
ad.test
#This code was retrieved from https://github.com/pmartinezarbizu/pairwiseAdonis/blob/master/pairwiseAdonis/R/pairwise.adonis.R
pairwise.adonis2 <- function(x, data, strata = NULL, nperm=999, ... ) {
#describe parent call function
ststri <- ifelse(is.null(strata),'Null',strata)
fostri <- as.character(x)
#list to store results
#copy model formula
x1 <- x
# extract left hand side of formula
lhs <- eval(x1[[2]], environment(x1), globalenv())
environment(x1) <- environment()
# extract factors on right hand side of formula
rhs <- x1[[3]]
# create model.frame matrix
x1[[2]] <- NULL
rhs.frame <- model.frame(x1, data, drop.unused.levels = TRUE)
# create unique pairwise combination of factors
co <- combn(unique(as.character(rhs.frame[,1])),2)
# create names vector
nameres <- c('parent_call')
for (elem in 1:ncol(co)){
nameres <- c(nameres,paste(co[1,elem],co[2,elem],sep='_vs_'))
}
#create results list
res <- vector(mode="list", length=length(nameres))
names(res) <- nameres
#add parent call to res
res['parent_call'] <- list(paste(fostri[2],fostri[1],fostri[3],', strata =',ststri, ', permutations',nperm ))
#start iteration trough pairwise combination of factors
for(elem in 1:ncol(co)){
#reduce model elements
if(inherits(eval(lhs),'dist')){
xred <- as.dist(as.matrix(eval(lhs))[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),
rhs.frame[,1] %in% c(co[1,elem],co[2,elem])])
}else{
xred <- eval(lhs)[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
}
mdat1 <-  data[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
# redefine formula
if(length(rhs) == 1){
xnew <- as.formula(paste('xred',as.character(rhs),sep='~'))
}else{
xnew <- as.formula(paste('xred' ,
paste(rhs[-1],collapse= as.character(rhs[1])),
sep='~'))}
#pass new formula to adonis
if(is.null(strata)){
ad <- adonis2(xnew,data=mdat1, ... )
}else{
perm <- how(nperm = nperm)
setBlocks(perm) <- with(mdat1, mdat1[,ststri])
ad <- adonis2(xnew,data=mdat1,permutations = perm, ... )}
res[nameres[elem+1]] <- list(ad[1:5])
}
#names(res) <- names
class(res) <- c("pwadstrata", "list")
return(res)
}
### Method summary
summary.pwadstrata = function(object, ...) {
cat("Result of pairwise.adonis2:\n")
cat("\n")
print(object[1], ...)
cat("\n")
cat("Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")
}
#run pairwise permanova
ad.pairwise <- pairwise.adonis2(pearson.correlation.matrix ~ developmental.stage+plant, data = trt)
ad.pairwise$`third-instar_vs_fifth-instar`
ad.pairwise$`fifth-instar_vs_early-pupa`
ad.pairwise$`early-pupa_vs_late-pupa`
ad.pairwise$`adult_vs_late-pupa`
ad.pairwise$`third-instar_vs_fifth-instar`
ad.pairwise$`fifth-instar_vs_early-pupa`
ad.pairwise$`early-pupa_vs_late-pupa`
ad.pairwise$`adult_vs_late-pupa`
